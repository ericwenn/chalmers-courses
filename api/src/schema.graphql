type Query {
  programs(query: ProgramInput): [Program!]!
  program: Program!
}

input ProgramInput {
  name: String
}

type Program {
  name: String!
  years: [StudyYear!]!
  requirements: [Requirement!]!
}

type StudyYear {
  year: Int
  periods: [StudyPeriod!]!
}

type StudyPeriod {
  name: String!
  courses: [Course!]!
}

type Course {
  name: String!
  code: String!
  points: Float!
  block: BlockEnum!
}

enum BlockEnum {
  NO_BLOCK,
  A,
  A_PLUS,
  B,
  B_PLUS,
  C,
  C_PLUS,
  D,
  D_PLUS
}

interface Requirement {
  type: RequirementEnum!
}
enum RequirementEnum {
  COMPULSORY_ELECTIVE,
  COMPULSORY
}

type CompulsoryRequirement implements Requirement {
  type: RequirementEnum!
  courses: [Course!]!
}

type CompulsoryElectiveRequirement implements Requirement {
  type: RequirementEnum!
  choose: Int!
  courses: [Course!]!
}
