type Query {
  programs(query: ProgramInput): [Program!]!
  program: Program!
}

input ProgramInput {
  name: String
}

type Program {
  _id: ID!
  name: String!
  grades: [Grade!]!
  requirements: [Requirement!]!
}

type Grade {
  _id: ID!
  year: Int
  periods: [Period!]!
}

type Period {
  _id: ID!
  name: String!
  courses: [Course!]!
}

type Course {
  _id: ID!
  name: String!
  code: String!
  points: Float!
  block: BlockEnum
}

enum BlockEnum {
  NO_BLOCK,
  A,
  A_PLUS,
  B,
  B_PLUS,
  C,
  C_PLUS,
  D,
  D_PLUS
}

interface Requirement {
  _id: ID!
  type: RequirementEnum!
  courses: [Course!]!
}
enum RequirementEnum {
  courses,
  points,
  compulsory
}

type CompulsoryRequirement implements Requirement {
  _id: ID!
  type: RequirementEnum!
  courses: [Course!]!
}

type CourseCompulsoryElectiveRequirement implements Requirement {
  _id: ID!
  type: RequirementEnum!
  choose: Int!
  courses: [Course!]!
}
type PointsCompulsoryElectiveRequirement implements Requirement {
  _id: ID!
  type: RequirementEnum!
  choose: Float!
  courses: [Course!]!
}
