// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import {
  Program,
  StudyYear,
  StudyPeriod,
  Course,
  CompulsoryRequirement,
  CompulsoryElectiveRequirement
} from "../data-sources/types";
import { Context } from "../context";

type BlockEnum =
  | "NO_BLOCK"
  | "A"
  | "A_PLUS"
  | "B"
  | "B_PLUS"
  | "C"
  | "C_PLUS"
  | "D"
  | "D_PLUS";
type RequirementEnum = "COMPULSORY_ELECTIVE" | "COMPULSORY";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ProgramInput {
    name: string | null;
  }

  export interface ArgsPrograms {
    query: ProgramInput | null;
  }

  export type ProgramsResolver = (
    parent: undefined,
    args: ArgsPrograms,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Program[] | Promise<Program[]>;

  export type ProgramResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Program | Promise<Program>;

  export interface Type {
    programs: (
      parent: undefined,
      args: ArgsPrograms,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Program[] | Promise<Program[]>;

    program: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Program | Promise<Program>;
  }
}

export namespace ProgramResolvers {
  export const defaultResolvers = {
    name: (parent: Program) => parent.name
  };

  export type NameResolver = (
    parent: Program,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type YearsResolver = (
    parent: Program,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => StudyYear[] | Promise<StudyYear[]>;

  export type RequirementsResolver = (
    parent: Program,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => {}[] | Promise<{}[]>;

  export interface Type {
    name: (
      parent: Program,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    years: (
      parent: Program,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => StudyYear[] | Promise<StudyYear[]>;

    requirements: (
      parent: Program,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => {}[] | Promise<{}[]>;
  }
}

export namespace StudyYearResolvers {
  export const defaultResolvers = {
    year: (parent: StudyYear) => parent.year
  };

  export type YearResolver = (
    parent: StudyYear,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type PeriodsResolver = (
    parent: StudyYear,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => StudyPeriod[] | Promise<StudyPeriod[]>;

  export interface Type {
    year: (
      parent: StudyYear,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    periods: (
      parent: StudyYear,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => StudyPeriod[] | Promise<StudyPeriod[]>;
  }
}

export namespace StudyPeriodResolvers {
  export const defaultResolvers = {
    name: (parent: StudyPeriod) => parent.name,
    courses: (parent: StudyPeriod) => parent.courses
  };

  export type NameResolver = (
    parent: StudyPeriod,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CoursesResolver = (
    parent: StudyPeriod,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Course[] | Promise<Course[]>;

  export interface Type {
    name: (
      parent: StudyPeriod,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    courses: (
      parent: StudyPeriod,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Course[] | Promise<Course[]>;
  }
}

export namespace CourseResolvers {
  export const defaultResolvers = {
    code: (parent: Course) => parent.code,
    name: (parent: Course) => parent.name,
    points: (parent: Course) => parent.points
  };

  export type NameResolver = (
    parent: Course,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CodeResolver = (
    parent: Course,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type PointsResolver = (
    parent: Course,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type BlockResolver = (
    parent: Course,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => BlockEnum | Promise<BlockEnum>;

  export interface Type {
    name: (
      parent: Course,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    code: (
      parent: Course,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    points: (
      parent: Course,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    block: (
      parent: Course,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => BlockEnum | Promise<BlockEnum>;
  }
}

export namespace CompulsoryRequirementResolvers {
  export const defaultResolvers = {};

  export type TypeResolver = (
    parent: CompulsoryRequirement,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => RequirementEnum | Promise<RequirementEnum>;

  export type CoursesResolver = (
    parent: CompulsoryRequirement,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Course[] | Promise<Course[]>;

  export interface Type {
    type: (
      parent: CompulsoryRequirement,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => RequirementEnum | Promise<RequirementEnum>;

    courses: (
      parent: CompulsoryRequirement,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Course[] | Promise<Course[]>;
  }
}

export namespace CompulsoryElectiveRequirementResolvers {
  export const defaultResolvers = {
    choose: (parent: CompulsoryElectiveRequirement) => parent.choose
  };

  export type TypeResolver = (
    parent: CompulsoryElectiveRequirement,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => RequirementEnum | Promise<RequirementEnum>;

  export type ChooseResolver = (
    parent: CompulsoryElectiveRequirement,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type CoursesResolver = (
    parent: CompulsoryElectiveRequirement,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Course[] | Promise<Course[]>;

  export interface Type {
    type: (
      parent: CompulsoryElectiveRequirement,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => RequirementEnum | Promise<RequirementEnum>;

    choose: (
      parent: CompulsoryElectiveRequirement,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    courses: (
      parent: CompulsoryElectiveRequirement,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Course[] | Promise<Course[]>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Program: ProgramResolvers.Type;
  StudyYear: StudyYearResolvers.Type;
  StudyPeriod: StudyPeriodResolvers.Type;
  Course: CourseResolvers.Type;
  CompulsoryRequirement: CompulsoryRequirementResolvers.Type;
  CompulsoryElectiveRequirement: CompulsoryElectiveRequirementResolvers.Type;
}
