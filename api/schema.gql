type Course {
  id: ID!
  name: String!
  period: Period!
  block: BlockEnum
  required: Boolean
  changes: [CourseChange!]!
}

type CourseChange {
  name: String
  period: Period
  block: BlockEnum
  
}

type Block {

}
enum Block {
  A,
  B,
  C,
  D
}

type Period {
  name: String!
  courses: [Course!]!
}

type Program {
  name: String!
  periods: [Period]!
  courses: [Course]!
  requirements: [Requirement]
}

enum RequirementEnum {
  COMPULSIVE_ELECTIVE,
}
interface Requirement {
  type: RequirementEnum!
}

type CompulsiveElectiveRequirement implements Requirement {
  type: RequirementEnum!
  required: Int!
  courses: [Course]!
}



# Chose Program of studying
# Seeing courses for this program in each period
# Selecting courses, and see if it fulfills requirements of program
